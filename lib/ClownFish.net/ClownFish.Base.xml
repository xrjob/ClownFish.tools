<?xml version="1.0"?>
<doc>
    <assembly>
        <name>ClownFish.Base</name>
    </assembly>
    <members>
        <member name="T:ClownFish.Base.Base64Extensions">
            <summary>
            BASE64编码的工具类
            </summary>
        </member>
        <member name="M:ClownFish.Base.Base64Extensions.ToBase64(System.String)">
            <summary>
            将字符串做BASE64编码
            </summary>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:ClownFish.Base.Base64Extensions.FromBase64(System.String)">
            <summary>
            从BASE64文本中还原结果
            </summary>
            <param name="base64"></param>
            <returns></returns>
        </member>
        <member name="T:ClownFish.Base.CryptoHelper">
            <summary>
            “对称加密算法”的封装工具类
            </summary>
        </member>
        <member name="M:ClownFish.Base.CryptoHelper.Encrypt(System.String,System.Security.Cryptography.SymmetricAlgorithm)">
            <summary>
            加密字符串
            </summary>
            <param name="text">等待加密的文本</param>
            <param name="sa">“对称加密算法”实例，要求已设置过KEY和IV</param>
            <returns>返回Base64编码的结果</returns>
        </member>
        <member name="M:ClownFish.Base.CryptoHelper.Encrypt(System.Byte[],System.Security.Cryptography.SymmetricAlgorithm)">
            <summary>
            加密字节数组
            </summary>
            <param name="input"></param>
            <param name="sa">“对称加密算法”实例，要求已设置过KEY和IV</param>
            <returns></returns>
        </member>
        <member name="M:ClownFish.Base.CryptoHelper.Decrypt(System.String,System.Security.Cryptography.SymmetricAlgorithm)">
            <summary>
            解密一个以Base64编码的加密字符串
            </summary>
            <param name="base64">等待解密的BASE64文本</param>
            <param name="sa">“对称加密算法”实例，要求已设置过KEY和IV</param>
            <returns></returns>
        </member>
        <member name="M:ClownFish.Base.CryptoHelper.Decrypt(System.Byte[],System.Security.Cryptography.SymmetricAlgorithm)">
            <summary>
            解密字节数组
            </summary>
            <param name="input"></param>
            <param name="sa">“对称加密算法”实例，要求已设置过KEY和IV</param>
            <returns></returns>
        </member>
        <member name="M:ClownFish.Base.CryptoHelper.SetKeyIV(System.Security.Cryptography.SymmetricAlgorithm,System.String)">
            <summary>
            根据指定的密码，设置“加密算法”的KEY和IV
            </summary>
            <param name="sa">“对称加密算法”实例</param>
            <param name="password">加密或解密的密码</param>
        </member>
        <member name="T:ClownFish.Base.TripleDESHelper">
            <summary>
            对TripleDES封装的工具类
            </summary>
        </member>
        <member name="M:ClownFish.Base.TripleDESHelper.Encrypt(System.String,System.String)">
            <summary>
            使用TripleDES加密字符串
            </summary>
            <param name="text"></param>
            <param name="password"></param>
            <returns></returns>
        </member>
        <member name="M:ClownFish.Base.TripleDESHelper.Encrypt(System.Byte[],System.String)">
            <summary>
            使用TripleDES加密字节数组
            </summary>
            <param name="input"></param>
            <param name="password"></param>
            <returns></returns>
        </member>
        <member name="M:ClownFish.Base.TripleDESHelper.Decrypt(System.String,System.String)">
            <summary>
            使用TripleDES解密一个以Base64编码的加密字符串
            </summary>
            <param name="base64"></param>
            <param name="password"></param>
            <returns></returns>
        </member>
        <member name="M:ClownFish.Base.TripleDESHelper.Decrypt(System.Byte[],System.String)">
            <summary>
            使用TripleDES解密字节数组
            </summary>
            <param name="input"></param>
            <param name="password"></param>
            <returns></returns>
        </member>
        <member name="T:ClownFish.Base.AesHelper">
            <summary>
            对AES算法封装的工具类
            </summary>
        </member>
        <member name="M:ClownFish.Base.AesHelper.Encrypt(System.String,System.String)">
            <summary>
            使用AES算法加密字符串
            </summary>
            <param name="text"></param>
            <param name="password"></param>
            <returns></returns>
        </member>
        <member name="M:ClownFish.Base.AesHelper.Encrypt(System.Byte[],System.String)">
            <summary>
            使用AES算法加密字节数组
            </summary>
            <param name="input"></param>
            <param name="password"></param>
            <returns></returns>
        </member>
        <member name="M:ClownFish.Base.AesHelper.Decrypt(System.String,System.String)">
            <summary>
            使用AES算法解密一个以Base64编码的加密字符串
            </summary>
            <param name="base64"></param>
            <param name="password"></param>
            <returns></returns>
        </member>
        <member name="M:ClownFish.Base.AesHelper.Decrypt(System.Byte[],System.String)">
            <summary>
            使用AES算法解密字节数组
            </summary>
            <param name="input"></param>
            <param name="password"></param>
            <returns></returns>
        </member>
        <member name="T:ClownFish.Base.DataTimeExtensions">
            <summary>
            包含DataTime类型相关的扩展方法
            </summary>
        </member>
        <member name="M:ClownFish.Base.DataTimeExtensions.ToTimeString(System.DateTime)">
            <summary>
            返回包含日期时间格式的字符串（"yyyy-MM-dd HH:mm:ss"）
            </summary>
            <param name="datetime"></param>
            <returns></returns>
        </member>
        <member name="M:ClownFish.Base.DataTimeExtensions.ToDateString(System.DateTime)">
            <summary>
            返回仅仅包含日期格式的字符串（"yyyy-MM-dd"）
            </summary>
            <param name="datetime"></param>
            <returns></returns>
        </member>
        <member name="T:ClownFish.Base.GzipHelper">
            <summary>
            GZIP压缩相关的工具方法
            </summary>
        </member>
        <member name="M:ClownFish.Base.GzipHelper.Compress(System.String)">
            <summary>
            用GZIP压缩一个字符串，并以BASE64字符串的形式返回压缩后的结果
            </summary>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:ClownFish.Base.GzipHelper.Decompress(System.String)">
            <summary>
            用GZIP解压缩一个BASE64字符串
            </summary>
            <param name="base64"></param>
            <returns></returns>
        </member>
        <member name="M:ClownFish.Base.GzipHelper.Compress(System.Byte[])">
            <summary>
            压缩一个二进制数组
            </summary>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:ClownFish.Base.GzipHelper.Decompress(System.Byte[])">
            <summary>
            解压缩一个二进制数组
            </summary>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="T:ClownFish.Base.HashHelper">
            <summary>
            封装常用的HASH算法
            </summary>
        </member>
        <member name="M:ClownFish.Base.HashHelper.Sha1(System.String)">
            <summary>
            计算字符串的 SHA1 签名
            </summary>
            <param name="text"></param>
            <returns></returns>
        </member>
        <member name="M:ClownFish.Base.HashHelper.Sha1(System.String,System.Text.Encoding)">
            <summary>
            计算字符串的 SHA1 签名
            </summary>
            <param name="text"></param>
            <param name="encoding"></param>
            <returns></returns>
        </member>
        <member name="M:ClownFish.Base.HashHelper.FileSha1(System.String)">
            <summary>
            计算文件的SHA1值
            </summary>
            <param name="filePath"></param>
            <returns></returns>
        </member>
        <member name="M:ClownFish.Base.HashHelper.Md5(System.String)">
            <summary>
            计算字符串的 MD5 签名
            </summary>
            <param name="text"></param>
            <returns></returns>
        </member>
        <member name="M:ClownFish.Base.HashHelper.Md5(System.String,System.Text.Encoding)">
            <summary>
            计算字符串的 MD5 签名
            </summary>
            <param name="text"></param>
            <param name="encoding"></param>
            <returns></returns>
        </member>
        <member name="M:ClownFish.Base.HashHelper.FileMD5(System.String)">
            <summary>
            计算文件的MD5值
            </summary>
            <param name="filePath"></param>
            <returns></returns>
        </member>
        <member name="T:ClownFish.Base.LazyObject`1">
            <summary>
            表示需要延迟创建的对象包装类
            </summary>
            <typeparam name="T">需要延迟创建的对象类型</typeparam>
        </member>
        <member name="F:ClownFish.Base.LazyObject`1._threadSafe">
            <summary>
            是否需要线程安全
            </summary>
        </member>
        <member name="F:ClownFish.Base.LazyObject`1._instance">
            <summary>
            实例引用
            </summary>
        </member>
        <member name="M:ClownFish.Base.LazyObject`1.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:ClownFish.Base.LazyObject`1.#ctor(System.Boolean)">
            <summary>
            构造函数
            </summary>
            <param name="threadSafe">是否需要线程安全</param>
        </member>
        <member name="P:ClownFish.Base.LazyObject`1.Instance">
            <summary>
            获取延迟创建的对象引用
            </summary>
        </member>
        <member name="T:ClownFish.Base.NameValue">
            <summary>
            表示一组用于HTTP传输的 【名称/值】 对。
            </summary>
        </member>
        <member name="P:ClownFish.Base.NameValue.Name">
            <summary>
            键名
            </summary>
        </member>
        <member name="P:ClownFish.Base.NameValue.Value">
            <summary>
            键值
            </summary>
        </member>
        <member name="M:ClownFish.Base.NameValue.ToString">
            <summary>
            ToString
            </summary>
            <returns></returns>
        </member>
        <member name="T:ClownFish.Base.RsaHelper">
            <summary>
            RSA算法（签名/验证签名/加密/解密）的封装工具类
            </summary>
        </member>
        <member name="M:ClownFish.Base.RsaHelper.Sign(System.Byte[],System.String)">
            <summary>
            用指定的证书名称对数据做签名
            </summary>
            <param name="data"></param>
            <param name="certName"></param>
            <returns></returns>
        </member>
        <member name="M:ClownFish.Base.RsaHelper.Verify(System.Byte[],System.String,System.String)">
            <summary>
            验证RSA签名
            </summary>
            <param name="data"></param>
            <param name="signature"></param>
            <param name="publicKey"></param>
            <returns></returns>
        </member>
        <member name="M:ClownFish.Base.RsaHelper.Verify(System.Byte[],System.String,System.Security.Cryptography.X509Certificates.X509Certificate2)">
            <summary>
            验证RSA签名
            </summary>
            <param name="data"></param>
            <param name="signature"></param>
            <param name="cert"></param>
            <returns></returns>
        </member>
        <member name="M:ClownFish.Base.RsaHelper.FindCertificate(System.String)">
            <summary>
            根据证书名查找X509证书，优先查找LocalMachine存储区域，如果失败则再查找CurrentUser
            </summary>
            <param name="certName"></param>
            <returns></returns>
        </member>
        <member name="M:ClownFish.Base.RsaHelper.Encrypt(System.Byte[],System.String)">
            <summary>
            RSA数据加密
            </summary>
            <param name="data">二进制数据</param>
            <param name="certName">证书名称</param>
            <returns>加密后的数据</returns>
        </member>
        <member name="M:ClownFish.Base.RsaHelper.Decrypt(System.Byte[],System.String)">
            <summary>
            用X509证书解密数据
            </summary>
            <param name="data"></param>
            <param name="certName"></param>
            <returns></returns>
        </member>
        <member name="T:ClownFish.Base.StringExtensions">
            <summary>
            包含String类型相关的扩展方法
            </summary>
        </member>
        <member name="M:ClownFish.Base.StringExtensions.EqualsIgnoreCase(System.String,System.String)">
            <summary>
            判断二个字符串是否相等，忽略大小写的比较方式。
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:ClownFish.Base.StringExtensions.EndsWithIgnoreCase(System.String,System.String)">
            <summary>
            以忽略大小写的方式调用 string.EndsWith
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:ClownFish.Base.StringExtensions.StartsWithIgnoreCase(System.String,System.String)">
            <summary>
            以忽略大小写的方式调用 string.EndsWith
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:ClownFish.Base.StringExtensions.IndexOfIgnoreCase(System.String,System.String)">
            <summary>
            以忽略大小写的方式调用 string.IndexOf
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:ClownFish.Base.StringExtensions.SplitTrim(System.String,System.Char[])">
            <summary>
            等效于 string.Split(charSeparators, StringSplitOptions.RemoveEmptyEntries)
            且为每个拆分后的结果又做了Trim()操作。
            </summary>
            <param name="str">要拆分的字符串</param>
            <param name="separator">分隔符</param>
            <returns></returns>
        </member>
        <member name="M:ClownFish.Base.StringExtensions.SplitString(System.String,System.Char,System.Char)">
            <summary>
            <para>拆分一个字符串行。如：a=1;b=2;c=3;d=4;</para>
            <para>此时可以调用: SplitString("a=1;b=2;c=3;d=4;", ';', '=');</para>
            <para>说明：对于空字符串，方法也会返回一个空的列表。</para>
            </summary>
            <param name="line">包含所有项目组成的字符串行</param>
            <param name="separator1">每个项目之间的分隔符</param>
            <param name="separator2">每个项目内的分隔符</param>
            <returns>拆分后的结果列表</returns>
        </member>
        <member name="M:ClownFish.Base.StringExtensions.ToTitleCase(System.String)">
            <summary>
            将字符串的首个英文字母大写
            </summary>
            <param name="text"></param>
            <returns></returns>
        </member>
        <member name="M:ClownFish.Base.StringExtensions.KeepLength(System.String,System.Int32)">
            <summary>
            将字符串保留指定的长度，如果超过长度就截取并显示省略号
            </summary>
            <param name="text">要处理的字符串</param>
            <param name="length">要保留的长度</param>
            <returns></returns>
        </member>
        <member name="M:ClownFish.Base.StringExtensions.GetBytes(System.String)">
            <summary>
            将字符串转成byte[]，等效于：Encoding.UTF8.GetBytes(text);
            </summary>
            <param name="text"></param>
            <returns></returns>
        </member>
        <member name="M:ClownFish.Base.StringExtensions.SubstringN(System.String,System.Int32)">
            <summary>
            截取一个字符串，只保留部分长度
            </summary>
            <param name="text"></param>
            <param name="keepLength"></param>
            <returns></returns>
        </member>
        <member name="T:ClownFish.Base.TestHelper">
            <summary>
            辅助测试的工具类
            </summary>
        </member>
        <member name="P:ClownFish.Base.TestHelper.ExceptionForTest">
            <summary>
            为测试强制设置一个异常，然后在调用TryThrowException()时将会抛出，
            由于这个属性仅仅用于测试环境，因此不考虑线程安全问题
            </summary>
        </member>
        <member name="M:ClownFish.Base.TestHelper.TryThrowException">
            <summary>
            调用这个方法可以模拟意外的异常发生，用于检验catch的代码是否能正确工作。
            抛出 ExceptionForTest 指定的异常，并将ExceptionForTest设置为NULL，
            如果 ExceptionForTest 为NULL，将忽略本次调用
            </summary>
        </member>
        <member name="T:ClownFish.Base.Files.CacheResult`1">
            <summary>
            缓存结果项的包装类
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="P:ClownFish.Base.Files.CacheResult`1.Result">
            <summary>
            缓存结果项
            </summary>
        </member>
        <member name="T:ClownFish.Base.Files.FileDependencyManager`1">
            <summary>
            文件缓存依赖的管理类。
            注意：请将些类型的实例用【静态字段】来引用，否则会产生内存泄露。
            </summary>
            <typeparam name="T">缓存的数据类型</typeparam>
        </member>
        <member name="P:ClownFish.Base.Files.FileDependencyManager`1.Result">
            <summary>
            缓存结果
            </summary>
        </member>
        <member name="M:ClownFish.Base.Files.FileDependencyManager`1.#ctor(System.Func{System.String[],`0},System.String[])">
            <summary>
            构造方法。
            注意：请将些类型的实例用【静态字段】来引用，否则会产生内存泄露。
            </summary>
            <param name="loadFileCallback">当需要加载文件时的回调委托</param>
            <param name="files">要读取的文件，读取后会做修改监控</param>
        </member>
        <member name="M:ClownFish.Base.Files.FileDependencyManager`1.#ctor(System.Func{System.String[],`0},System.Action{System.String[],System.Web.Caching.CacheItemRemovedReason},System.String[])">
            <summary>
            构造方法。
            注意：请将些类型的实例用【静态字段】来引用，否则会产生内存泄露。
            </summary>
            <param name="loadFileCallback">当需要加载文件时的回调委托</param>
            <param name="afterRemoveCallback">缓存移除后触发的回调委托</param>
            <param name="files">要读取的文件，读取后会做修改监控</param>
        </member>
        <member name="F:ClownFish.Base.Files.FileDependencyManager`1.s_WaitFileCloseTimeout">
            <summary>
            等待文件句柄关闭的时间，单位：毫秒，默认值：3000（3秒）。
            默认值是一个比较保守的时间，为了快速运行单元测试用例，可以修改这个时间
            </summary>
        </member>
        <member name="T:ClownFish.Base.Framework.AppInitializer">
            <summary>
            应用程序初始化工具类
            </summary>
            
        </member>
        <member name="M:ClownFish.Base.Framework.AppInitializer.Start">
            <summary>
            程序初始化 启动方法由<see cref="T:ClownFish.Base.Framework.PreApplicationStartMethodAttribute"/>类配置并使用
            </summary>
            <exception cref="T:System.InvalidProgramException">反射调用配置的启动方法，方法调用失败，且该方法的内部异常为空，抛出的反射调用失败异常</exception>
            <exception cref="T:System.Exception">反射调用配置的启动方法，启动方法内部的异常</exception>
        </member>
        <member name="T:ClownFish.Base.Framework.PreApplicationStartMethodAttribute">
            <summary>
            提供对应用程序启动的扩展支持。
            </summary>
            <remarks>
             说明：
             ASP.NET也有一个同名的类型，即：System.Web.PreApplicationStartMethodAttribute
             那个类型的初始化执行时间比较早，而且不能由我们的代码来决定何时启动初始化，例如：
             如果使用那个类型，在初始化时不能调用 BuildManager.GetReferencedAssemblies(); （会抛异常）
             
             使用当前这个类型，可以由我们决定什么时候开始初始化，例如：
             我们可以在Global.asax的Application_Start中调用AppInitializer.Start()来触发初始化。
            </remarks>
        </member>
        <member name="M:ClownFish.Base.Framework.PreApplicationStartMethodAttribute.#ctor(System.Type,System.String)">
            <summary>
            初始化 PreApplicationStartMethodAttribute 类的新实例。
            </summary>
            <param name="type">一个描述启动方法的类型的对象。</param><param name="methodName">没有返回值的空参数签名。</param>
        </member>
        <member name="P:ClownFish.Base.Framework.PreApplicationStartMethodAttribute.Type">
            <summary>
            获取关联启动方法所返回的类型。
            </summary>
            <returns>
            一个描述启动方法的类型的对象。
            </returns>
        </member>
        <member name="P:ClownFish.Base.Framework.PreApplicationStartMethodAttribute.MethodName">
            <summary>
            获取关联的启动方法。
            </summary>
            <returns>
            一个字符串，其中包含关联启动方法的名称。
            </returns>
        </member>
        <member name="T:ClownFish.Base.Framework.RunTimeEnvironment">
            <summary>
            当前应用程序的运行时环境
            </summary>
        </member>
        <member name="F:ClownFish.Base.Framework.RunTimeEnvironment.IsAspnetApp">
            <summary>
            当前运行的程序是不是ASP.NET程序
            </summary>
        </member>
        <member name="F:ClownFish.Base.Framework.RunTimeEnvironment.IsDebugMode">
            <summary>
            当前程序是否以DEBUG模式运行
            </summary>
        </member>
        <member name="M:ClownFish.Base.Framework.RunTimeEnvironment.GetLoadAssemblies(System.Boolean)">
            <summary>
            获取当前程序加载的所有程序集
            </summary>
            <param name="ignoreSystemAssembly">是否忽略以System开头和动态程序集，通常用于反射时不搜索它们。</param>
            <returns></returns>
        </member>
        <member name="F:ClownFish.Base.Framework.WebConfig.IsDebugMode">
            <summary>
            相当于HttpContext.IsDebuggingEnabled，不过那个属性是实例的，因此使用不方便，所以就重新实现了一个静态的版本。
            </summary>
        </member>
        <member name="T:ClownFish.Base.Http.CustomDataAttribute">
            <summary>
            允许自定义特定数据类型的参数获取机制，用于在Action调用前获取Action参数值
            </summary>
        </member>
        <member name="M:ClownFish.Base.Http.CustomDataAttribute.GetHttpValue(System.Web.HttpContext,System.Reflection.ParameterInfo)">
            <summary>
            根据HttpContext和ParameterInfo获取参数值
            </summary>
            <param name="context"></param>
            <param name="p"></param>
            <returns></returns>
        </member>
        <member name="T:ClownFish.Base.Http.HttpFile">
            <summary>
            表示一个符合HTTP协议的上传文件
            </summary>
        </member>
        <member name="P:ClownFish.Base.Http.HttpFile.ContentLength">
            <summary>
            获取上载文件的大小（以字节为单位）。
            </summary>
        </member>
        <member name="P:ClownFish.Base.Http.HttpFile.ContentType">
            <summary>
            获取客户端发送的文件的 MIME 内容类型。
            </summary>
        </member>
        <member name="P:ClownFish.Base.Http.HttpFile.FileName">
            <summary>
            获取客户端上的文件的完全限定名称，
            上传时需要指定。
            </summary>
        </member>
        <member name="P:ClownFish.Base.Http.HttpFile.FileBody">
            <summary>
            获取上传文件的内容，
            上传时需要指定。
            </summary>
        </member>
        <member name="P:ClownFish.Base.Http.HttpFile.Key">
            <summary>
            表单中的name，对应服务端HttpFileCollection.AllKeys中的值
            </summary>
        </member>
        <member name="T:ClownFish.Base.Http.HttpHeaderCollection">
            <summary>
            HTTP头的存储集合
            </summary>
        </member>
        <member name="M:ClownFish.Base.Http.HttpHeaderCollection.#ctor">
            <summary>
            构造方法
            </summary>
        </member>
        <member name="P:ClownFish.Base.Http.HttpHeaderCollection.Item(System.String)">
            <summary>
            索引器，根据名称访问集合
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:ClownFish.Base.Http.HttpHeaderCollection.Add(System.String,System.String)">
            <summary>
            增加一个键值对
            </summary>
            <param name="name"></param>
            <param name="value"></param>
        </member>
        <member name="M:ClownFish.Base.Http.HttpHeaderCollection.Remove(System.String)">
            <summary>
            根据指定的名称删除键值列表元素
            </summary>
            <param name="name"></param>
        </member>
        <member name="T:ClownFish.Base.Http.SerializeFormat">
            <summary>
            指示Action结果的序列化方式
            </summary>
        </member>
        <member name="F:ClownFish.Base.Http.SerializeFormat.None">
            <summary>
            默认值，没有指定。注意：有些场景下不指定将会出现异常。
            </summary>
        </member>
        <member name="F:ClownFish.Base.Http.SerializeFormat.Text">
            <summary>
            直接调用 ToString() 方法
            匹配标头："text/plain"
            </summary>
        </member>
        <member name="F:ClownFish.Base.Http.SerializeFormat.Json">
            <summary>
            采用 JSON.NET 序列化为 JSON 字符串
            匹配标头："application/json"
            </summary>
        </member>
        <member name="F:ClownFish.Base.Http.SerializeFormat.Json2">
            <summary>
            采用 JSON.NET 序列化为 JSON 字符串，并尽量输出类型信息，可用于服务端之间或者客户端是C#的反序列化。
            匹配标头："application/json"
            </summary>
        </member>
        <member name="F:ClownFish.Base.Http.SerializeFormat.Xml">
            <summary>
            序列化成 XML 字符串
            匹配标头："application/xml"
            </summary>
        </member>
        <member name="F:ClownFish.Base.Http.SerializeFormat.Form">
            <summary>
            采用 "application/x-www-form-urlencoded" 方式序列化
            匹配标头："application/x-www-form-urlencoded"
            </summary>
        </member>
        <member name="F:ClownFish.Base.Http.SerializeFormat.Auto">
            <summary>
            自动根据请求头去响应，用于服务端响应。
            客户端发起请求时，需要指定 Request.Headers["X-Result-Format"]，否则按文本输出
            </summary>
        </member>
        <member name="T:ClownFish.Base.JsonExtensions">
            <summary>
            JSON序列化的工具类
            </summary>
        </member>
        <member name="M:ClownFish.Base.JsonExtensions.ToJson(System.Object)">
            <summary>
            将一个对象序列化为JSON字符串。
            </summary>
            <param name="obj">要序列化的对象</param>
            <returns>序列化得到的JSON字符串</returns>
        </member>
        <member name="M:ClownFish.Base.JsonExtensions.ToJson(System.Object,System.Boolean)">
            <summary>
            将一个对象序列化为JSON字符串。
            </summary>
            <param name="obj">要序列化的对象</param>
            <param name="keepType">尽量在序列化过程中保留类型信息（Newtonsoft.Json可支持）</param>
            <returns>序列化得到的JSON字符串</returns>
        </member>
        <member name="M:ClownFish.Base.JsonExtensions.FromJson``1(System.String)">
            <summary>
            将一个JSON字符串反序列化为对象
            </summary>
            <typeparam name="T">反序列的对象类型参数</typeparam>
            <param name="json">JSON字符串</param>
            <returns>反序列化得到的结果</returns>
        </member>
        <member name="M:ClownFish.Base.JsonExtensions.FromJson(System.String,System.Type)">
            <summary>
            将一个JSON字符串反序列化为对象
            </summary>
            <param name="json">JSON字符串</param>
            <param name="destType">反序列的对象类型参数</param>
            <returns>反序列化得到的结果</returns>
        </member>
        <member name="T:ClownFish.Base.Json.SetDefaultJsonSerializerSettingArgs">
            <summary>
            设置默认的JSON序列化配置的事件参数
            </summary>
        </member>
        <member name="P:ClownFish.Base.Json.SetDefaultJsonSerializerSettingArgs.Settings">
            <summary>
            用于获取用效的JsonSerializerSettings实例，可重新赋值或者修改这个对象的属性
            </summary>
        </member>
        <member name="P:ClownFish.Base.Json.SetDefaultJsonSerializerSettingArgs.IsSerialize">
            <summary>
            True: 当前调用是用于序列化，False：用于反序列化
            </summary>
        </member>
        <member name="T:ClownFish.Base.Json.DefaultJsonSerializer">
            <summary>
            Json序列化的默认封装，不建议直接使用，提供这个类型主要是为了可以替换JSON序列化的实现。
            推荐使用JsonExtensions提供的方法。
            </summary>
        </member>
        <member name="E:ClownFish.Base.Json.DefaultJsonSerializer.SetDefaultJsonSerializerSettings">
            <summary>
            设置默认的JSON序列化配置事件
            </summary>
        </member>
        <member name="M:ClownFish.Base.Json.DefaultJsonSerializer.GetJsonSerializerSettings(System.Boolean)">
            <summary>
            获取默认的序列化设置
            </summary>
            <returns></returns>
        </member>
        <member name="M:ClownFish.Base.Json.DefaultJsonSerializer.Serialize(System.Object,System.Boolean)">
            <summary>
            将一个对象序列化为JSON字符串。
            </summary>
            <param name="obj">要序列化的对象</param>
            <param name="keepType">尽量在序列化过程中保留类型信息（Newtonsoft.Json可支持）</param>
            <returns>序列化得到的JSON字符串</returns>
        </member>
        <member name="M:ClownFish.Base.Json.DefaultJsonSerializer.Serialize(System.Object,Newtonsoft.Json.JsonSerializerSettings)">
            <summary>
            将一个对象序列化为JSON字符串。
            </summary>
            <param name="obj">要序列化的对象</param>
            <param name="settings">序列化参数</param>
            <returns></returns>
        </member>
        <member name="M:ClownFish.Base.Json.DefaultJsonSerializer.Deserialize``1(System.String)">
            <summary>
            JSON反序列化
            </summary>
            <typeparam name="T">期望反序列化得到的对象类型</typeparam>
            <param name="json">JSON字符串</param>
            <returns></returns>
        </member>
        <member name="M:ClownFish.Base.Json.DefaultJsonSerializer.Deserialize(System.String,System.Type)">
            <summary>
            JSON反序列化
            </summary>
            <param name="json">JSON字符串</param>
            <param name="destType">期望反序列化得到的对象类型</param>
            <returns></returns>
        </member>
        <member name="T:ClownFish.Base.Json.XmlCdataJsonConverter">
            <summary>
            支持XmlCdata的Json序列化包装类
            </summary>
        </member>
        <member name="M:ClownFish.Base.Json.XmlCdataJsonConverter.CanConvert(System.Type)">
            <summary>
            重写JSON.NET的方法
            </summary>
            <param name="objectType"></param>
            <returns></returns>
        </member>
        <member name="M:ClownFish.Base.Json.XmlCdataJsonConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
            重写JSON.NET的方法
            </summary>
            <param name="reader"></param>
            <param name="objectType"></param>
            <param name="existingValue"></param>
            <param name="serializer"></param>
            <returns></returns>
        </member>
        <member name="M:ClownFish.Base.Json.XmlCdataJsonConverter.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
            重写JSON.NET的方法
            </summary>
            <param name="writer"></param>
            <param name="value"></param>
            <param name="serializer"></param>
        </member>
        <member name="T:ClownFish.Base.Reflection.AttributeCache">
            <summary>
            缓存反射读取到的Attribute对象
            </summary>
        </member>
        <member name="M:ClownFish.Base.Reflection.AttributeCache.Register``1(System.Object,``0)">
            <summary>
            为指定的对象注册Attribute
            </summary>
            <typeparam name="T"></typeparam>
            <param name="obj"></param>
            <param name="attr"></param>
        </member>
        <member name="M:ClownFish.Base.Reflection.AttributeCache.Register``1(System.Object,``0[])">
            <summary>
            为指定的对象注册Attribute
            </summary>
            <typeparam name="T"></typeparam>
            <param name="obj"></param>
            <param name="attrs"></param>
        </member>
        <member name="M:ClownFish.Base.Reflection.AttributeCache.GetOne``1(System.Object,System.Boolean)">
            <summary>
            检索应用于指定对象的指定类型的自定义特性（返回单个Attribute）
            </summary>
            <typeparam name="T">类型参数，要求从Attribute继承</typeparam>
            <param name="obj">包含Attribute的对象</param>
            <param name="inherit">如果检查 element 的上级，则为 true；否则为 false。</param>
            <returns>与 T 相匹配的自定义属性；否则，如果没有找到这类属性，则为 null。</returns>
        </member>
        <member name="M:ClownFish.Base.Reflection.AttributeCache.GetArray``1(System.Object,System.Boolean)">
            <summary>
            检索应用于指定对象的指定类型的自定义特性（返回Attribute数组）
            </summary>
            <typeparam name="T">类型参数，要求从Attribute继承</typeparam>
            <param name="obj">包含Attribute的对象</param>
            <param name="inherit">如果检查 element 的上级，则为 true；否则为 false。</param>
            <returns>与 T 相匹配的自定义属性；否则，如果没有找到这类属性，则为 null。</returns>
        </member>
        <member name="M:ClownFish.Base.Reflection.DynamicMethodFactory.EmitFastInt(System.Reflection.Emit.ILGenerator,System.Int32)">
            <summary>Emits code to save an integer to the evaluation stack.</summary>
            <param name="ilGenerator">The MSIL generator.</param>
            <param name="value">The value to push.</param>
        </member>
        <member name="M:ClownFish.Base.Reflection.DynamicMethodFactory.EmitBoxIfNeeded(System.Reflection.Emit.ILGenerator,System.Type)">
            <summary>Boxes a type if needed.</summary>
            <param name="ilGenerator">The MSIL generator.</param>
            <param name="type">The type.</param>
        </member>
        <member name="T:ClownFish.Base.Reflection.IInvokeMethod">
            <summary>
            定义了通用的方法调用接口
            </summary>
        </member>
        <member name="T:ClownFish.Base.Reflection.MethodInvokerFactory">
            <summary>
            创建IInvokeMethod实例的工厂类
            </summary>
        </member>
        <member name="M:ClownFish.Base.Reflection.MethodInvokerFactory.CreateMethodInvokerWrapper(System.Reflection.MethodInfo)">
            <summary>
            根据指定的MethodInfo对象创建相应的IInvokeMethod实例。
            </summary>
            <param name="method"></param>
            <returns></returns>
        </member>
        <member name="T:ClownFish.Base.Reflection.MethodExtensions">
            <summary>
            一些扩展方法，用于快速调用方法，它们都可以优化反射性能。
            </summary>
        </member>
        <member name="M:ClownFish.Base.Reflection.MethodExtensions.FastInvoke(System.Reflection.MethodInfo,System.Object,System.Object[])">
            <summary>
            根据指定的MethodInfo以及参数数组，快速调用相关的方法。
            </summary>
            <param name="methodInfo"></param>
            <param name="obj"></param>
            <param name="parameters"></param>
            <returns></returns>
        </member>
        <member name="T:ClownFish.Base.Reflection.ReflectMethodBase`1">
            <summary>
            为了简化实现IInvokeMethod接口的抽象类，继承类只需要重写InvokeInternal方法即可。
            </summary>
            <typeparam name="TDelegate"></typeparam>
        </member>
        <member name="T:ClownFish.Base.Reflection.IGetValue">
            <summary>
            定义读属性操作的接口
            </summary>
        </member>
        <member name="T:ClownFish.Base.Reflection.ISetValue">
            <summary>
            定义写属性操作的接口
            </summary>
        </member>
        <member name="T:ClownFish.Base.Reflection.GetterSetterFactory">
            <summary>
            创建IGetValue或者ISetValue实例的工厂方法类
            </summary>
        </member>
        <member name="M:ClownFish.Base.Reflection.GetterSetterFactory.CreatePropertyGetterWrapper(System.Reflection.PropertyInfo)">
            <summary>
            根据指定的PropertyInfo对象，返回对应的IGetValue实例
            </summary>
            <param name="propertyInfo"></param>
            <returns></returns>
        </member>
        <member name="M:ClownFish.Base.Reflection.GetterSetterFactory.CreatePropertySetterWrapper(System.Reflection.PropertyInfo)">
            <summary>
            根据指定的PropertyInfo对象，返回对应的ISetValue实例
            </summary>
            <param name="propertyInfo"></param>
            <returns></returns>
        </member>
        <member name="T:ClownFish.Base.Reflection.PropertyExtensions">
            <summary>
            一些扩展方法，用于访问属性，它们都可以优化反射性能。
            </summary>
        </member>
        <member name="M:ClownFish.Base.Reflection.PropertyExtensions.FastGetValue(System.Reflection.PropertyInfo,System.Object)">
            <summary>
            快速调用PropertyInfo的GetValue方法
            </summary>
            <param name="propertyInfo"></param>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:ClownFish.Base.Reflection.PropertyExtensions.FastSetValue(System.Reflection.PropertyInfo,System.Object,System.Object)">
            <summary>
            快速调用PropertyInfo的SetValue方法
            </summary>
            <param name="propertyInfo"></param>
            <param name="obj"></param>
            <param name="value"></param>
        </member>
        <member name="T:ClownFish.Base.Reflection.ReflectionExtensions">
            <summary>
            一些扩展方法，用于反射操作，它们都可以优化反射性能。
            </summary>
        </member>
        <member name="M:ClownFish.Base.Reflection.ReflectionExtensions.GetMyAttribute``1(System.Reflection.MemberInfo,System.Boolean)">
            <summary>
            获取类型成员的Attribute（单个定义）
            </summary>
            <typeparam name="T">要查找的修饰属性类型</typeparam>
            <param name="m">包含attribute的类成员对象</param>
            <param name="inherit">搜索此成员的继承链以查找这些属性，则为 true；否则为 false。</param>
            <returns></returns>
        </member>
        <member name="M:ClownFish.Base.Reflection.ReflectionExtensions.GetMyAttributes``1(System.Reflection.MemberInfo,System.Boolean)">
            <summary>
            获取类型成员的Attribute（多个定义）
            </summary>
            <typeparam name="T">要查找的修饰属性类型</typeparam>
            <param name="m">包含attribute的类成员对象</param>
            <param name="inherit">搜索此成员的继承链以查找这些属性，则为 true；否则为 false。</param>
            <returns></returns>
        </member>
        <member name="M:ClownFish.Base.Reflection.ReflectionExtensions.GetMyAttribute``1(System.Reflection.ParameterInfo,System.Boolean)">
            <summary>
            获取参数对象的Attribute（单个定义）
            </summary>
            <typeparam name="T">要查找的修饰属性类型</typeparam>
            <param name="p">包含attribute的参数对象</param>
            <param name="inherit">搜索此成员的继承链以查找这些属性，则为 true；否则为 false。</param>
            <returns></returns>
        </member>
        <member name="M:ClownFish.Base.Reflection.ReflectionExtensions.GetMyAttributes``1(System.Reflection.ParameterInfo,System.Boolean)">
            <summary>
            获取参数对象的Attribute（多个定义）
            </summary>
            <typeparam name="T">要查找的修饰属性类型</typeparam>
            <param name="p">包含attribute的参数对象</param>
            <param name="inherit">搜索此成员的继承链以查找这些属性，则为 true；否则为 false。</param>
            <returns></returns>
        </member>
        <member name="M:ClownFish.Base.Reflection.ReflectionExtensions.GetMyAttribute``1(System.Type,System.Boolean)">
            <summary>
            获取类型对象的Attribute（单个定义）
            </summary>
            <typeparam name="T">要查找的修饰属性类型</typeparam>
            <param name="t">包含attribute的类型</param>
            <param name="inherit">搜索此成员的继承链以查找这些属性，则为 true；否则为 false。</param>
            <returns></returns>
        </member>
        <member name="M:ClownFish.Base.Reflection.ReflectionExtensions.GetMyAttributes``1(System.Type,System.Boolean)">
            <summary>
            获取类型对象的Attribute（多个定义）
            </summary>
            <typeparam name="T">要查找的修饰属性类型</typeparam>
            <param name="t">包含attribute的类型</param>
            <param name="inherit">搜索此成员的继承链以查找这些属性，则为 true；否则为 false。</param>
            <returns></returns>
        </member>
        <member name="M:ClownFish.Base.Reflection.ReflectionExtensions.GetAttributes``1(System.Reflection.Assembly)">
            <summary>
            等同于调用 Assembly实例的GetCustomAttributes()，只是在缺少依赖程序集时能指出当前程序集的名称。
            </summary>
            <typeparam name="T"></typeparam>
            <param name="assembly"></param>
            <returns></returns>
        </member>
        <member name="M:ClownFish.Base.Reflection.ReflectionExtensions.GetArgumentType(System.Type,System.Type)">
            <summary>
            获取一个封闭泛型的类型参数
            </summary>
            <param name="type">一个具体的封装泛型类型</param>
            <param name="baseTypeDefinition">泛型定义</param>
            <returns>泛型的类型参数</returns>
        </member>
        <member name="M:ClownFish.Base.Reflection.ReflectionExtensions.GetPublicTypes(System.Reflection.Assembly)">
            <summary>
            等同于调用 Assembly实例的GetExportedTypes()，只是在缺少依赖程序集时能指出当前程序集的名称。
            </summary>
            <param name="assembly"></param>
            <returns></returns>
        </member>
        <member name="M:ClownFish.Base.Reflection.ReflectionExtensions.GetAllTypes(System.Reflection.Assembly)">
            <summary>
            等同于调用 Assembly实例的GetTypes()，只是在缺少依赖程序集时能指出当前程序集的名称。
            </summary>
            <param name="assembly"></param>
            <returns></returns>
        </member>
        <member name="M:ClownFish.Base.Reflection.ReflectionExtensions.GetAssemblyList``1">
            <summary>
            获取带个指定修饰属性的程序集列表
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="T:ClownFish.Base.Reflection.ReflectionOptimizeExtensions">
            <summary>
            包含用于优化反射调用性能的扩展类
            </summary>
        </member>
        <member name="M:ClownFish.Base.Reflection.ReflectionOptimizeExtensions.FastGetValue(System.Reflection.FieldInfo,System.Object)">
            <summary>
            用优化的方式快速读取FieldInfo
            </summary>
            <param name="fieldInfo"></param>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:ClownFish.Base.Reflection.ReflectionOptimizeExtensions.FastSetField(System.Reflection.FieldInfo,System.Object,System.Object)">
            <summary>
            用优化的方式快速写FieldInfo
            </summary>
            <param name="fieldInfo"></param>
            <param name="obj"></param>
            <param name="value"></param>
        </member>
        <member name="M:ClownFish.Base.Reflection.ReflectionOptimizeExtensions.FastNew(System.Type)">
            <summary>
            根据指定的Type，用优化的方式快速创建实例
            </summary>
            <param name="instanceType"></param>
            <returns></returns>
        </member>
        <member name="M:ClownFish.Base.Reflection.ReflectionOptimizeExtensions.FastGetValue2(System.Reflection.PropertyInfo,System.Object)">
            <summary>
            用优化的方式快速读取PropertyInfo
            </summary>
            <param name="propertyInfo"></param>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:ClownFish.Base.Reflection.ReflectionOptimizeExtensions.FastSetValue2(System.Reflection.PropertyInfo,System.Object,System.Object)">
            <summary>
            用优化的方式快速写PropertyInfo
            </summary>
            <param name="propertyInfo"></param>
            <param name="obj"></param>
            <param name="value"></param>
        </member>
        <member name="M:ClownFish.Base.Reflection.ReflectionOptimizeExtensions.FastInvoke2(System.Reflection.MethodInfo,System.Object,System.Object[])">
            <summary>
            用优化的方式快速调用一个方法
            </summary>
            <param name="methodInfo"></param>
            <param name="obj"></param>
            <param name="parameters"></param>
            <returns></returns>
        </member>
        <member name="T:ClownFish.Base.TypeExtend.BaseEventObject">
            <summary>
            可用于外部事件订阅的基类，继承这个类型后，就可以从其它类型中订阅当前类型的实例事件。
            </summary>
        </member>
        <member name="M:ClownFish.Base.TypeExtend.BaseEventObject.BindSubscribes(System.Type)">
            <summary>
            在实例化的时候绑定事件订阅者
            </summary>
            <param name="srcType"></param>
        </member>
        <member name="T:ClownFish.Base.TypeExtend.EventSubscriber`1">
            <summary>
            用于订阅BaseEventObject派生类型事件的基类，
            如果要订阅BaseEventObject派生类型事件，必须继承此类型，
            为了便于识别，建议继承类型的名称以“EventSubscriber”结尾
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:ClownFish.Base.TypeExtend.EventSubscriber`1.SubscribeEvent(`0)">
            <summary>
            订阅事件
            </summary>
            <param name="instance"></param>
        </member>
        <member name="T:ClownFish.Base.TypeExtend.ExtendAssemblyAttribute">
            <summary>
            指示这个是一个包含扩展类型的程序集。
            注意：如果代码直接调用 ExtenderManager.RegisterExtendType 或者 RegisterSubscriber 将不参考这个标记。
            </summary>
        </member>
        <member name="T:ClownFish.Base.TypeExtend.ExtendTypeAttribute">
            <summary>
            指示这是一个扩展类型（继承类型，或者事件订阅类型），用于自动加载扩展类型时识别。
            注意：如果代码直接调用 ExtenderManager.RegisterExtendType 或者 RegisterSubscriber 将不参考这个标记。
            </summary>
        </member>
        <member name="T:ClownFish.Base.TypeExtend.ExtenderManager">
            <summary>
            用于管理扩展类型的工具类
            </summary>
        </member>
        <member name="F:ClownFish.Base.TypeExtend.ExtenderManager.s_typeMapDict">
            <summary>
            类型与继承类型的映射字典
            </summary>
        </member>
        <member name="M:ClownFish.Base.TypeExtend.ExtenderManager.GetExtendType(System.Type)">
            <summary>
            获取指定类型的扩展类（继承类），
            如果没有找到匹配的类型，就返回NULL
            </summary>
            <param name="srcType"></param>
            <returns></returns>
        </member>
        <member name="M:ClownFish.Base.TypeExtend.ExtenderManager.RegisterExtendType(System.Type)">
            <summary>
            注册扩展类型（继承类），表示指定的类型要对当前类型的基类做扩展（实例化时将会代替基类），
            为了便于识别，建议扩展类型的名称以“Ext”结尾
            </summary>
            <param name="extType">继承类，表示将要对基类扩展（替代）</param>
        </member>
        <member name="M:ClownFish.Base.TypeExtend.ExtenderManager.RemoveExtendType(System.Type)">
            <summary>
            移除扩展类型的注册（应该仅用于单元测试）
            </summary>
            <param name="extType"></param>
        </member>
        <member name="F:ClownFish.Base.TypeExtend.ExtenderManager.s_eventDict">
            <summary>
            保存事件源与订阅类型的映射关系： Type / Type[]
            </summary>
        </member>
        <member name="M:ClownFish.Base.TypeExtend.ExtenderManager.GetSubscribers(System.Type)">
            <summary>
            获取指定事件源的所有订阅者类型
            如果没有找到匹配的类型，就返回NULL
            </summary>
            <param name="eventSrcType"></param>
            <returns></returns>
        </member>
        <member name="M:ClownFish.Base.TypeExtend.ExtenderManager.RegisterSubscriber(System.Type,System.Type,System.Boolean)">
            <summary>
            注册事件订阅者
            </summary>
            <param name="subscriberType">事件订阅者类型，要求从EventSubscriber&lt;T&gt;继承</param>
            <param name="eventSrcType">事件源类型，要求从BaseEventObject继承</param>
            <param name="isAdd">是：注册，否：移除注册</param>
        </member>
        <member name="M:ClownFish.Base.TypeExtend.ExtenderManager.RegisterSubscriber(System.Type)">
            <summary>
            注册事件订阅者，
            为了便于识别，建议事件订阅者类型的名称以“EventSubscriber”结尾
            </summary>
            <param name="subscriberType">事件订阅者类型，要求从EventSubscriber&lt;T&gt;继承</param>
        </member>
        <member name="M:ClownFish.Base.TypeExtend.ExtenderManager.RemoveSubscriber(System.Type)">
            <summary>
            移除事件订阅者
            </summary>
            <param name="subscriberType"></param>
        </member>
        <member name="M:ClownFish.Base.TypeExtend.ExtenderManager.LoadAllExtenders">
            <summary>
            批量自动加载所有的扩展类型（继承类型，或者事件订阅类型），
            注意：类型必须用[ExtendType]标记，程序集必须用[ExtendAssembly]标记
            </summary>
        </member>
        <member name="T:ClownFish.Base.TypeExtend.IObjectResolver">
            <summary>
            对象的构造接口
            </summary>
        </member>
        <member name="M:ClownFish.Base.TypeExtend.IObjectResolver.CreateObject(System.Type)">
            <summary>
            根据指定的类型获取对应的实例
            </summary>
            <param name="objectType"></param>
            <returns></returns>
        </member>
        <member name="T:ClownFish.Base.TypeExtend.DefaultObjectResolver">
            <summary>
            框架内部默认的IObjectResolver实现类，用于根据指定类型创建对象实例。
            这个实现类中，主要处理了二个扩展特性：类型扩展和事件订阅。
            </summary>
        </member>
        <member name="M:ClownFish.Base.TypeExtend.DefaultObjectResolver.CreateObject(System.Type)">
            <summary>
            根据类型创建实例，
            注意：将要实例化的类型必须有【无参的构造函数】。
            </summary>
            <param name="objectType"></param>
            <returns></returns>
        </member>
        <member name="T:ClownFish.Base.TypeExtend.ObjectFactory">
            <summary>
            创建扩展对象的工厂类型
            </summary>
        </member>
        <member name="M:ClownFish.Base.TypeExtend.ObjectFactory.SetResolver(ClownFish.Base.TypeExtend.IObjectResolver)">
            <summary>
            设置IObjectResolver的实例，允许在框架外部控制对象的实例化过程。
            </summary>
            <param name="objectResolver"></param>
        </member>
        <member name="M:ClownFish.Base.TypeExtend.ObjectFactory.New``1">
            <summary>
            尝试创建指定类型的扩展类，并尝试加载事件订阅者
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:ClownFish.Base.TypeExtend.ObjectFactory.New(System.Type)">
            <summary>
            尝试创建指定类型的扩展类
            </summary>
            <param name="objectType"></param>
            <returns></returns>
        </member>
        <member name="T:ClownFish.Base.WebClient.ClientExtensions">
            <summary>
            定义HttpClient的扩展方法的工具类
            </summary>
        </member>
        <member name="M:ClownFish.Base.WebClient.ClientExtensions.GetResult(ClownFish.Base.WebClient.HttpOption)">
            <summary>
            封装HttpOption的Send扩展方法发送HTTP请求，
            如果遇到WebException异常，就转换成RemoteWebException异常
            </summary>
            <param name="option"></param>
            <returns></returns>
        </member>
        <member name="M:ClownFish.Base.WebClient.ClientExtensions.GetResultAsync(ClownFish.Base.WebClient.HttpOption)">
            <summary>
            封装HttpOption的SendAsync扩展方法发送HTTP请求，
            如果遇到WebException异常，就转换成RemoteWebException异常
            </summary>
            <param name="option"></param>
            <returns></returns>
        </member>
        <member name="M:ClownFish.Base.WebClient.ClientExtensions.GetResult``1(ClownFish.Base.WebClient.HttpOption)">
            <summary>
            封装HttpOption的Send扩展方法发送HTTP请求，
            如果遇到WebException异常，就转换成RemoteWebException异常
            </summary>
            <typeparam name="T"></typeparam>
            <param name="option"></param>
            <returns></returns>
        </member>
        <member name="M:ClownFish.Base.WebClient.ClientExtensions.GetResultAsync``1(ClownFish.Base.WebClient.HttpOption)">
            <summary>
            封装HttpOption的SendAsync扩展方法发送HTTP请求，
            如果遇到WebException异常，就转换成RemoteWebException异常
            </summary>
            <typeparam name="T"></typeparam>
            <param name="option"></param>
            <returns></returns>
        </member>
        <member name="M:ClownFish.Base.WebClient.ClientExtensions.Send(ClownFish.Base.WebClient.HttpOption)">
            <summary>
            根据指定的HttpOption参数，用【同步】方式发起一次HTTP请求
            </summary>
            <param name="option">HttpOption的实例，用于描述请求参数</param>
            <returns>返回服务端的调用结果，并转换成指定的类型</returns>
        </member>
        <member name="M:ClownFish.Base.WebClient.ClientExtensions.SendAsync(ClownFish.Base.WebClient.HttpOption)">
            <summary>
            根据指定的HttpOption参数，用【异步】方式发起一次HTTP请求
            </summary>
            <param name="option">HttpOption的实例，用于描述请求参数</param>
            <returns>返回服务端的调用结果，并转换成指定的类型</returns>
        </member>
        <member name="M:ClownFish.Base.WebClient.ClientExtensions.Send``1(ClownFish.Base.WebClient.HttpOption)">
            <summary>
            根据指定的HttpOption参数，用【同步】方式发起一次HTTP请求
            </summary>
            <typeparam name="T">返回值的类型参数</typeparam>
            <param name="option">HttpOption的实例，用于描述请求参数</param>
            <returns>返回服务端的调用结果，并转换成指定的类型</returns>
        </member>
        <member name="M:ClownFish.Base.WebClient.ClientExtensions.SendAsync``1(ClownFish.Base.WebClient.HttpOption)">
            <summary>
            根据指定的HttpOption参数，用【异步】方式发起一次HTTP请求
            </summary>
            <typeparam name="T">返回值的类型参数</typeparam>
            <param name="option">HttpOption的实例，用于描述请求参数</param>
            <returns>返回服务端的调用结果，并转换成指定的类型</returns>
        </member>
        <member name="M:ClownFish.Base.WebClient.ClientExtensions.GetQueryString(System.Object)">
            <summary>
            生成查询字符串参数
            </summary>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="T:ClownFish.Base.WebClient.FormDataCollection">
            <summary>
            表示HTTP表单的数据集合（key=value ）
            </summary>
        </member>
        <member name="P:ClownFish.Base.WebClient.FormDataCollection.HasFile">
            <summary>
            是否包含上传文件
            </summary>
        </member>
        <member name="M:ClownFish.Base.WebClient.FormDataCollection.GetMultipartContentType">
            <summary>
            获取上传文件的请求头
            </summary>
            <returns></returns>
        </member>
        <member name="M:ClownFish.Base.WebClient.FormDataCollection.AddString(System.String,System.String)">
            <summary>
            往集合中添加一个键值对（允许key重复）
            </summary>
            <param name="key">数据项的名称</param>
            <param name="value">数据值</param>
        </member>
        <member name="M:ClownFish.Base.WebClient.FormDataCollection.AddObject(System.String,System.Object)">
            <summary>
            往集合中添加一个键值对（允许key重复）
            </summary>
            <param name="key">数据项的名称</param>
            <param name="value">数据值</param>
        </member>
        <member name="M:ClownFish.Base.WebClient.FormDataCollection.ToString">
            <summary>
            输出集合数据为 "application/x-www-form-urlencoded" 格式。
            注意：1、忽略上传文件
                 2、每次调用都会重新计算（因此尽量避免重复调用）
            </summary>
            <returns></returns>
        </member>
        <member name="M:ClownFish.Base.WebClient.FormDataCollection.WriteToStream(System.IO.Stream,System.Text.Encoding)">
            <summary>
            将收集的表单数据写入流
            </summary>
            <param name="stream">Stream实例，用于写入</param>
            <param name="encoding">字符编码方式</param>
        </member>
        <member name="M:ClownFish.Base.WebClient.FormDataCollection.Create(System.Object)">
            <summary>
            将一个对象按"application/x-www-form-urlencoded" 方式序列化
            说明：这个实现与浏览器的实现是有差别的，它不支持数组，也不支持上传文件
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="T:ClownFish.Base.WebClient.HttpClient">
            <summary>
            一个用于发送HTTP请求的客户端
            </summary>
        </member>
        <member name="P:ClownFish.Base.WebClient.HttpClient.Request">
            <summary>
            HttpWebRequest实例引用
            </summary>
        </member>
        <member name="E:ClownFish.Base.WebClient.HttpClient.OnBeforeCreateRequest">
            <summary>
            创建HttpWebRequest前将会引发此事件，提供最后一个修改请求参数的机会。
            例如：可以添加一些全局的请求头。
            （扩展点：允许EventSubscriber的继承类来订阅）
            </summary>
        </member>
        <member name="T:ClownFish.Base.WebClient.HttpClient.BeforeCreateRequestEventArgs">
            <summary>
            创建请求前的事件参数类型
            </summary>
        </member>
        <member name="P:ClownFish.Base.WebClient.HttpClient.BeforeCreateRequestEventArgs.Url">
            <summary>
            将要用来创建请求的URL地址
            </summary>
        </member>
        <member name="P:ClownFish.Base.WebClient.HttpClient.BeforeCreateRequestEventArgs.RequestUrl">
            <summary>
            实际要请求的URL，允许在事件中修改，最终以修改后的结果发送请求。
            </summary>
        </member>
        <member name="E:ClownFish.Base.WebClient.HttpClient.OnBeforeSendRequest">
            <summary>
            创建HttpWebRequest之后将会引发此事件，提供最后一个修改请求参数的机会。
            例如：可以添加一些全局的请求头。
            （扩展点：允许EventSubscriber的继承类来订阅）
            </summary>
        </member>
        <member name="T:ClownFish.Base.WebClient.HttpClient.BeforeSendRequestEventArgs">
            <summary>
            创建请求之后的事件参数类型
            </summary>
        </member>
        <member name="P:ClownFish.Base.WebClient.HttpClient.BeforeSendRequestEventArgs.Request">
            <summary>
            HttpWebRequest实例
            </summary>
        </member>
        <member name="P:ClownFish.Base.WebClient.HttpClient.BeforeSendRequestEventArgs.Data">
            <summary>
            当前请求提交的数据，可能为 null
            </summary>
        </member>
        <member name="P:ClownFish.Base.WebClient.HttpClient.BeforeSendRequestEventArgs.Format">
            <summary>
            提交数据的序列化格式
            </summary>
        </member>
        <member name="M:ClownFish.Base.WebClient.HttpClient.CreateWebRequest(System.String)">
            <summary>
            创建HttpWebRequest
            </summary>
            <param name="url"></param>
            <returns></returns>
        </member>
        <member name="M:ClownFish.Base.WebClient.HttpClient.SetRequestData(System.Object,ClownFish.Base.Http.SerializeFormat)">
            <summary>
            设置要提交的数据
            </summary>
            <param name="data"></param>
            <param name="format"></param>
        </member>
        <member name="M:ClownFish.Base.WebClient.HttpClient.SetRequestDataAsync(System.Object,ClownFish.Base.Http.SerializeFormat)">
            <summary>
            设置要提交的数据（以异步方式）
            </summary>
            <param name="data"></param>
            <param name="format"></param>
        </member>
        <member name="M:ClownFish.Base.WebClient.HttpClient.GetResponse">
            <summary>
            提交请求，并获取服务端响应结果
            </summary>
            <returns></returns>
        </member>
        <member name="M:ClownFish.Base.WebClient.HttpClient.GetResponseAsync">
            <summary>
            提交请求，并获取服务端响应结果（以异步方式）
            </summary>
            <returns></returns>
        </member>
        <member name="M:ClownFish.Base.WebClient.HttpClient.GetResult``1(System.Net.HttpWebResponse)">
            <summary>
            从HttpWebResponse读取结果
            </summary>
            <typeparam name="T"></typeparam>
            <param name="response"></param>
            <returns></returns>
        </member>
        <member name="M:ClownFish.Base.WebClient.HttpClient.Send``1(System.String,System.Object,ClownFish.Base.Http.SerializeFormat)">
            <summary>
            根据指定的URL以及提交数据，用【同步】方式发起一次HTTP请求
            </summary>
            <typeparam name="T">返回值的类型参数</typeparam>
            <param name="url">要访问的URL地址</param>
            <param name="data">要提交的数据对象</param>
            <param name="format">数据对象在传输过程中采用的序列化方式</param>
            <returns>返回服务端的调用结果，并转换成指定的类型</returns>
        </member>
        <member name="M:ClownFish.Base.WebClient.HttpClient.SendAsync``1(System.String,System.Object,ClownFish.Base.Http.SerializeFormat)">
            <summary>
            根据指定的URL以及提交数据，用【同步】方式发起一次HTTP请求
            </summary>
            <typeparam name="T">返回值的类型参数</typeparam>
            <param name="url">要访问的URL地址</param>
            <param name="data">要提交的数据对象</param>
            <param name="format">数据对象在传输过程中采用的序列化方式</param>
            <returns>返回服务端的调用结果，并转换成指定的类型</returns>
        </member>
        <member name="T:ClownFish.Base.WebClient.HttpOption">
            <summary>
            表示一次HTTP请求的描述信息
            </summary>
        </member>
        <member name="M:ClownFish.Base.WebClient.HttpOption.#ctor">
            <summary>
            构造方法
            </summary>
        </member>
        <member name="P:ClownFish.Base.WebClient.HttpOption.Url">
            <summary>
            URL地址（建议查询字符串参数在Data属性中指定，此处只指定文件路径即可）
            </summary>
        </member>
        <member name="P:ClownFish.Base.WebClient.HttpOption.Method">
            <summary>
            HTTP请求的方法，例如： GET, POST
            </summary>
        </member>
        <member name="P:ClownFish.Base.WebClient.HttpOption.Headers">
            <summary>
            请求头列表
            </summary>
        </member>
        <member name="P:ClownFish.Base.WebClient.HttpOption.Data">
            <summary>
            需要提交的数据（与 $.ajax()方法的 Data 属性含义类似），
            可指定一个FormDataCollection实例，或者一个 IDictionary实例，或者一个匿名对象实例
            如果是GET请求，数据会自动转变成查询字参数，如果是POST，则随请求体发送
            </summary>
        </member>
        <member name="P:ClownFish.Base.WebClient.HttpOption.Format">
            <summary>
            数据的序列化方式。
            注意：不包含请求体的请求，不需要指定这个属性，例如：GET , HEAD
            </summary>
        </member>
        <member name="P:ClownFish.Base.WebClient.HttpOption.ContentType">
            <summary>
            框架自动计算，不需要调用者指定
            </summary>
        </member>
        <member name="M:ClownFish.Base.WebClient.HttpOption.IsMustQueryString">
            <summary>
            根据Method属性，返回是不是必须以查询字符串形式提交数据
            </summary>
        </member>
        <member name="P:ClownFish.Base.WebClient.HttpOption.UserAgent">
            <summary>
            在发送请求时指定 User-Agent 头
            </summary>
        </member>
        <member name="P:ClownFish.Base.WebClient.HttpOption.DisableAutoRedirect">
            <summary>
            禁止自动重定向
            </summary>
        </member>
        <member name="P:ClownFish.Base.WebClient.HttpOption.Cookie">
            <summary>
            Cookie容器
            </summary>
        </member>
        <member name="M:ClownFish.Base.WebClient.HttpOption.SetCookieHeader(System.String)">
            <summary>
            直接指定要发送什么 COOKIE，通常用于不需要接收Cookier场景
            注意：
            1、如果需要接收Cookie，请设置 Cookie 属性，
            2、cookieHeader的数据需要自行编码
            </summary>
            <param name="cookieHeader">要发送的COOKIE头内容</param>
        </member>
        <member name="P:ClownFish.Base.WebClient.HttpOption.Credentials">
            <summary>
            获取或设置请求的身份验证信息。
            </summary>
        </member>
        <member name="P:ClownFish.Base.WebClient.HttpOption.Timeout">
            <summary>
            获取或设置 GetResponse 和 GetRequestStream 方法的超时值（以毫秒为单位）。
            </summary>
        </member>
        <member name="P:ClownFish.Base.WebClient.HttpOption.SetRequestAction">
            <summary>
            指定一个委托，用于在发送请求前设置HttpWebRequest的其它属性
            </summary>
        </member>
        <member name="P:ClownFish.Base.WebClient.HttpOption.ReadResponseAction">
            <summary>
            指定一个委托，用于在请求接收后调用，可获取请求头相关信息
            </summary>
        </member>
        <member name="M:ClownFish.Base.WebClient.HttpOption.CheckInput">
            <summary>
            检查传入的属性是否存在冲突的设置
            </summary>
        </member>
        <member name="M:ClownFish.Base.WebClient.HttpOption.FromRawText(System.String)">
            <summary>
            根据原始请求信息文本构建 HttpOption 对象（格式可参考Fiddler的Inspectors标签页内容）
            </summary>
            <param name="text"></param>
            <returns></returns>
        </member>
        <member name="T:ClownFish.Base.WebClient.RemoteWebException">
            <summary>
            在HTTP调用时发生的远程服务端异常。
            这个异常类型解决了二个问题：
            1、WebException异常消息Message太笼统，很不友好。
            2、Response属性的页面编码不一致（ASP.NET 采用UTF-8，IIS采用GB2312），导致获取异常页面时乱码问题。
            </summary>
        </member>
        <member name="P:ClownFish.Base.WebClient.RemoteWebException.ResponseText">
            <summary>
            服务端返回的响应内容（可能为空）
            </summary>
        </member>
        <member name="P:ClownFish.Base.WebClient.RemoteWebException.Message">
            <summary>
            异常的简单描述
            </summary>
        </member>
        <member name="M:ClownFish.Base.WebClient.RemoteWebException.#ctor(System.Net.WebException)">
            <summary>
            构造函数
            </summary>
            <param name="ex"></param>
        </member>
        <member name="M:ClownFish.Base.WebClient.RemoteWebException.TryReadResponseText(System.Net.WebException)">
            <summary>
            尝试从WebException实例中读取服务端响应文本
            </summary>
            <param name="ex">WebException的实例</param>
            <returns>异常的描述信息，通常是一段HTML代码</returns>
        </member>
        <member name="M:ClownFish.Base.WebClient.RemoteWebException.GetHtmlTitle(System.String)">
            <summary>
            尝试从一段HTML代码中读取文档标题部分
            </summary>
            <param name="text">HTML代码</param>
            <returns>文档标题</returns>
        </member>
        <member name="M:ClownFish.Base.WebClient.RemoteWebException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            用序列化数据初始化 RemoteWebException 类的新实例
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="M:ClownFish.Base.WebClient.RemoteWebException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            重写方法，用关于异常的信息设置
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="F:ClownFish.Base.WebClient.ResponseReader._response">
            <summary>
            HTTP响应对象
            </summary>
        </member>
        <member name="F:ClownFish.Base.WebClient.ResponseReader._httpHeaderEncoding">
            <summary>
            HTTP响应头中指定的编码
            </summary>
        </member>
        <member name="F:ClownFish.Base.WebClient.ResponseReader._responseStream">
            <summary>
            HTTP响应流
            </summary>
        </member>
        <member name="F:ClownFish.Base.WebClient.ResponseReader._textStream">
            <summary>
            响应文本流（可能被复制为内存流）
            </summary>
        </member>
        <member name="F:ClownFish.Base.WebClient.ResponseReader._isHtml">
            <summary>
            是否是HTML页面的响应
            </summary>
        </member>
        <member name="T:ClownFish.Base.Xml.XmlCdata">
            <summary>
            支持CDATA序列化的包装类
            </summary>
        </member>
        <member name="M:ClownFish.Base.Xml.XmlCdata.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:ClownFish.Base.Xml.XmlCdata.#ctor(System.String)">
            <summary>
            构造函数
            </summary>
            <param name="value">初始值</param>
        </member>
        <member name="P:ClownFish.Base.Xml.XmlCdata.Value">
            <summary>
            原始值。
            </summary>
        </member>
        <member name="M:ClownFish.Base.Xml.XmlCdata.ToString">
            <summary>
            ToString()
            </summary>
            <returns></returns>
        </member>
        <member name="M:ClownFish.Base.Xml.XmlCdata.op_Implicit(System.String)~ClownFish.Base.Xml.XmlCdata">
            <summary>
            重载操作符，支持隐式类型转换。
            </summary>
            <param name="text"></param>
            <returns></returns>
        </member>
        <member name="M:ClownFish.Base.Xml.XmlCdata.op_Implicit(ClownFish.Base.Xml.XmlCdata)~System.String">
            <summary>
            重载操作符，支持隐式类型转换。
            </summary>
            <param name="text"></param>
            <returns></returns>
        </member>
        <member name="M:ClownFish.Base.Xml.XmlCdata.Equals(ClownFish.Base.Xml.XmlCdata)">
            <summary>
            比较是否相等
            </summary>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="M:ClownFish.Base.Xml.XmlCdata.Equals(System.Object)">
            <summary>
            重写 Equals 方法
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:ClownFish.Base.Xml.XmlCdata.GetHashCode">
            <summary>
            重写 GetHashCode 方法
            </summary>
            <returns></returns>
        </member>
        <member name="M:ClownFish.Base.Xml.XmlCdata.op_Equality(ClownFish.Base.Xml.XmlCdata,ClownFish.Base.Xml.XmlCdata)">
            <summary>
            重写 == 运算符
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:ClownFish.Base.Xml.XmlCdata.op_Inequality(ClownFish.Base.Xml.XmlCdata,ClownFish.Base.Xml.XmlCdata)">
            <summary>
            重写 != 运算符
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="T:ClownFish.Base.Xml.XmlHelper">
            <summary>
            实现XML序列化与反序列化的包装工具类
            </summary>
        </member>
        <member name="M:ClownFish.Base.Xml.XmlHelper.XmlSerializerObject(System.Object)">
            <summary>
            将一个对象序列化为XML字符串。这个方法将不生成XML文档声明头。
            </summary>
            <param name="o">要序列化的对象</param>
            <returns>序列化产生的XML字符串</returns>
        </member>
        <member name="M:ClownFish.Base.Xml.XmlHelper.XmlSerialize(System.Object,System.Text.Encoding)">
            <summary>
            将一个对象序列化为XML字符串
            </summary>
            <param name="o">要序列化的对象</param>
            <param name="encoding">编码方式</param>
            <returns>序列化产生的XML字符串</returns>
        </member>
        <member name="M:ClownFish.Base.Xml.XmlHelper.XmlSerializeToFile(System.Object,System.String)">
            <summary>
            将一个对象按XML序列化的方式写入到一个文件（采用UTF8编码）
            </summary>
            <param name="o">要序列化的对象</param>
            <param name="path">保存文件路径</param>
        </member>
        <member name="M:ClownFish.Base.Xml.XmlHelper.XmlSerializeToFile(System.Object,System.String,System.Text.Encoding)">
            <summary>
            将一个对象按XML序列化的方式写入到一个文件
            </summary>
            <param name="o">要序列化的对象</param>
            <param name="path">保存文件路径</param>
            <param name="encoding">编码方式</param>
        </member>
        <member name="M:ClownFish.Base.Xml.XmlHelper.XmlDeserialize(System.IO.Stream,System.Type)">
            <summary>
            从XML字符串流中反序列化对象
            </summary>
            <param name="stream">包含对象的XML字符串流</param>
            <param name="destType">要序列化的目标类型</param>
            <returns>反序列化得到的对象</returns>
        </member>
        <member name="M:ClownFish.Base.Xml.XmlHelper.XmlDeserialize(System.String,System.Type,System.Text.Encoding)">
            <summary>
            从XML字符串中反序列化对象
            </summary>
            <param name="s">包含对象的XML字符串</param>
            <param name="destType">要序列化的目标类型</param>
            <param name="encoding">编码方式</param>
            <returns>反序列化得到的对象</returns>
        </member>
        <member name="M:ClownFish.Base.Xml.XmlHelper.XmlDeserialize``1(System.String)">
            <summary>
            从XML字符串中反序列化对象
            </summary>
            <typeparam name="T">结果对象类型</typeparam>
            <param name="s">包含对象的XML字符串</param>
            <returns>反序列化得到的对象</returns>
        </member>
        <member name="M:ClownFish.Base.Xml.XmlHelper.XmlDeserializeFromFile``1(System.String)">
            <summary>
            读入一个文件，并按XML的方式反序列化对象。
            </summary>
            <typeparam name="T">结果对象类型</typeparam>
            <param name="path">文件路径</param>
            <returns>反序列化得到的对象</returns>
        </member>
        <member name="T:ClownFish.Base.XmlExtensions">
            <summary>
            XML序列化与反序列化的扩展方法类
            </summary>
        </member>
        <member name="M:ClownFish.Base.XmlExtensions.ToXml(System.Object)">
            <summary>
            将对象执行XML序列化（使用UTF-8编码）
            </summary>
            <param name="obj">要序列化的对象</param>
            <returns>XML序列化的结果</returns>
        </member>
        <member name="M:ClownFish.Base.XmlExtensions.FromXml``1(System.String)">
            <summary>
            从XML字符串中反序列化对象（使用UTF-8编码）
            </summary>
            <typeparam name="T">反序列化的结果类型</typeparam>
            <param name="xml">XML字符串</param>
            <returns>反序列化的结果</returns>
        </member>
        <member name="M:ClownFish.Base.XmlExtensions.FromXml(System.String,System.Type)">
            <summary>
             从XML字符串中反序列化对象（使用UTF-8编码）
            </summary>
            <param name="s"></param>
            <param name="type">反序列化的结果类型</param>
            <returns></returns>
        </member>
    </members>
</doc>
